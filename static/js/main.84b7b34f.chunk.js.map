{"version":3,"sources":["components/Modal/ModalContent.module.css","serviceWorker.js","hooks/useWindowEvent.js","components/Modal/ModalContent.js","components/Modal/index.js","components/Modal/ModalContainer.js","components/SamplePopup.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","useWindowEvent","event","callback","useEffect","addEventListener","removeEventListener","ModalContent","forwardRef","ref","children","title","closeModal","onCancel","onOk","isLoading","createPortal","className","styles","modal","role","aria-labelledby","aria-modal","tabIndex","modal__content","modal__content__close","type","onClick","aria-label","xmlns","width","height","viewBox","d","modal__content__header","id","modal__content__body","modal__content__footer","disabled","modal__backdrop","document","getElementById","Modal","trigger","content","useState","isOpened","setIsOpened","setIsLoading","modalRef","useRef","restoreScrolling","body","style","overflow","a","console","log","useCallback","target","current","contains","keyCode","key","SamplePopup","App","Promise","resolve","setTimeout","open","close","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84b7b34f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalContent_modal__34qkw\",\"modal__content\":\"ModalContent_modal__content__1ZEZG\",\"modal__content__close\":\"ModalContent_modal__content__close__1A-lA\",\"close-icon\":\"ModalContent_close-icon__3qzFi\",\"modal__content__header\":\"ModalContent_modal__content__header__2uc-z\",\"modal__content__body\":\"ModalContent_modal__content__body__1mDVW\",\"modal__content__footer\":\"ModalContent_modal__content__footer__3sfGH\",\"modal__backdrop\":\"ModalContent_modal__backdrop__dVnii\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { useEffect } from \"react\";\n\nexport const useWindowEvent = (event, callback) => {\n  useEffect(() => {\n    window.addEventListener(event, callback);\n\n    return () => {\n      window.removeEventListener(event, callback);\n    }\n  }, [event, callback]);\n};\n","import React, { forwardRef } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport styles from \"./ModalContent.module.css\";\n\nconst ModalContent = forwardRef(\n  ({\n    children,\n    title,\n    closeModal,\n    onCancel,\n    onOk,\n    isLoading\n  }, ref) => (\n  createPortal(\n    <div\n      className={styles.modal}\n      role=\"dialog\"\n      aria-labelledby=\"modal-label\"\n      aria-modal=\"true\"\n      tabIndex=\"-1\"\n    >\n      <div\n        className={styles.modal__content}\n        ref={ref}\n        role=\"document\"\n      >\n        <button\n          className={styles.modal__content__close}\n          type=\"button\"\n          onClick={closeModal}\n          title=\"Close\"\n          aria-label=\"Close\"\n        >\n          <span\n            className={styles[\"close-icon\"]}\n            role=\"img\"\n            aria-label=\"Close\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"18\"\n              height=\"18\"\n              viewBox=\"0 0 18 18\"\n            >\n              <path\n                d=\"M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z\"\n              />\n            </svg>\n          </span>\n        </button>\n        <div\n          className={styles.modal__content__header}\n        >\n          <div\n            id=\"modal-label\"\n          >\n            {title}\n          </div>\n        </div>\n        <div\n          className={styles.modal__content__body}\n        >\n          {children}\n        </div>\n        <div\n          className={styles.modal__content__footer}\n        >\n          <button\n            type=\"button\"\n            onClick={onCancel}\n            className=\"button button--cancel\"\n            disabled={isLoading}\n          >\n            Cancel\n          </button>\n          <button\n            type=\"button\"\n            onClick={onOk}\n            className=\"button button--ok\"\n            disabled={isLoading}\n          >\n            OK\n          </button>\n        </div>\n      </div>\n      <div\n        className={styles.modal__backdrop}\n      />\n    </div>,\n    document.getElementById(\"modal-root\")\n  )\n));\n\nexport default ModalContent;\n","import Modal from './ModalContainer';\n\nexport default Modal;\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\n\nimport { useWindowEvent } from \"hooks/useWindowEvent\";\n\nimport ModalContent from './ModalContent';\n\nconst ModalContainer = ({\n  trigger,\n  content,\n  title = \"\",\n  onCancel = () => {},\n  onOk = () => {}\n}) => {\n  const [isOpened, setIsOpened] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const modalRef = useRef();\n\n  function closeModal() {\n    setIsOpened(false);\n  }\n\n  function openModal() {\n    setIsOpened(true);\n  }\n\n  function lockScrolling() {\n    document.body.style.overflow = \"hidden\";\n  }\n\n  function restoreScrolling() {\n    document.body.style.overflow = \"unset\";\n  }\n\n  async function handleCancel() {\n    setIsLoading(true);\n\n    try {\n      await onCancel();\n      closeModal();\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function handleOk() {\n    setIsLoading(true);\n\n    try {\n      await onOk();\n      closeModal();\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  // Handle outside clicks\n  useWindowEvent(\"mousedown\", useCallback(({ target }) => {\n    if (modalRef.current && modalRef.current.contains(target)) {\n      return;\n    }\n\n    closeModal();\n  }, []));\n\n  // Handle ESC presses\n  useWindowEvent(\"keydown\", useCallback(({ keyCode, key }) => {\n    if (keyCode === 27 || key === \"Escape\" || key === \"Esc\") {\n      closeModal();\n    }\n  }, []));\n\n  useEffect(() => {\n    if (isOpened) {\n      lockScrolling()\n    } else {\n      restoreScrolling();\n    }\n\n    return () => {\n      restoreScrolling();\n    };\n  }, [isOpened]);\n\n  return (\n    <>\n      {trigger(openModal)}\n      {isOpened && (\n        <ModalContent\n          ref={modalRef}\n          title={title}\n          closeModal={closeModal}\n          onCancel={handleCancel}\n          onOk={handleOk}\n          isLoading={isLoading}\n        >\n          {content(closeModal)}\n        </ModalContent>\n      )}\n    </>\n  );\n};\n\nexport default ModalContainer;\n","import React from \"react\";\n\nconst SamplePopup = () => {\n  return (\n    <div>\n      <p>\n        Hello, if you click on the <strong>Ok</strong> button, it will trigger an asynchronous event for 3 seconds. This is only to show that it can handle asynchronous events (useful for form submitting or similar cases).\n      </p>\n      <p>\n        If you click on the <strong>(X)</strong> button or <strong>Cancel</strong> button, the modal will be closed immediately.\n      </p>\n      <p>\n        It can also be closed by <strong>clicking outside</strong> the content or by <strong>pressing ESC</strong> \n      </p>\n    </div>\n  );\n};\n\nexport default SamplePopup;\n","import React from \"react\";\n\nimport Modal from \"components/Modal/\";\nimport SamplePopup from \"components/SamplePopup\";\n\nfunction App() {\n  async function onOk() {\n    console.log(\"Please wait...\");\n\n    await new Promise(resolve => {\n      setTimeout(resolve, 3000);\n    });\n    console.log(\"OK, done!\");\n  }\n\n  function onCancel() {\n    console.log(\"Canceled!\");\n  }\n\n  return (\n    <>\n      <h1>\n        React Modal Assessment\n      </h1>\n      <div>\n        <Modal\n          title=\"Simple ReactJS Modal\"\n          trigger={open => {\n            return (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={open}\n              >\n                Open modal\n              </button>\n            )}\n          }\n          onCancel={onCancel}\n          onOk={onOk}\n          content={close => (\n            <SamplePopup />\n          )}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./App\";\n\nimport \"assets/styles/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}